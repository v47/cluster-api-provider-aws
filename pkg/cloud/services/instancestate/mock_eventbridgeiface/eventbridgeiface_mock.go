/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/services/instancestate (interfaces: EventBridgeAPI)

package mock_eventbridgeiface

import (
	context "context"
	reflect "reflect"

	eventbridge "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	gomock "github.com/golang/mock/gomock"
)

type MockEventBridgeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEventBridgeAPIMockRecorder
}

type MockEventBridgeAPIMockRecorder struct {
	mock *MockEventBridgeAPI
}

func NewMockEventBridgeAPI(ctrl *gomock.Controller) *MockEventBridgeAPI {
	mock := &MockEventBridgeAPI{ctrl: ctrl}
	mock.recorder = &MockEventBridgeAPIMockRecorder{mock}
	return mock
}

func (m *MockEventBridgeAPI) EXPECT() *MockEventBridgeAPIMockRecorder { return m.recorder }

func (m *MockEventBridgeAPI) DeleteRule(ctx context.Context, in *eventbridge.DeleteRuleInput, opts ...func(*eventbridge.Options)) (*eventbridge.DeleteRuleOutput, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockEventBridgeAPIMockRecorder) DeleteRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockEventBridgeAPI)(nil).DeleteRule), append([]interface{}{ctx, in}, opts...)...)
}

func (m *MockEventBridgeAPI) DescribeRule(ctx context.Context, in *eventbridge.DescribeRuleInput, opts ...func(*eventbridge.Options)) (*eventbridge.DescribeRuleOutput, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockEventBridgeAPIMockRecorder) DescribeRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRule", reflect.TypeOf((*MockEventBridgeAPI)(nil).DescribeRule), append([]interface{}{ctx, in}, opts...)...)
}

func (m *MockEventBridgeAPI) ListTargetsByRule(ctx context.Context, in *eventbridge.ListTargetsByRuleInput, opts ...func(*eventbridge.Options)) (*eventbridge.ListTargetsByRuleOutput, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsByRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockEventBridgeAPIMockRecorder) ListTargetsByRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsByRule", reflect.TypeOf((*MockEventBridgeAPI)(nil).ListTargetsByRule), append([]interface{}{ctx, in}, opts...)...)
}

func (m *MockEventBridgeAPI) PutRule(ctx context.Context, in *eventbridge.PutRuleInput, opts ...func(*eventbridge.Options)) (*eventbridge.PutRuleOutput, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.PutRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockEventBridgeAPIMockRecorder) PutRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRule", reflect.TypeOf((*MockEventBridgeAPI)(nil).PutRule), append([]interface{}{ctx, in}, opts...)...)
}

func (m *MockEventBridgeAPI) PutTargets(ctx context.Context, in *eventbridge.PutTargetsInput, opts ...func(*eventbridge.Options)) (*eventbridge.PutTargetsOutput, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTargets", varargs...)
	ret0, _ := ret[0].(*eventbridge.PutTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockEventBridgeAPIMockRecorder) PutTargets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTargets", reflect.TypeOf((*MockEventBridgeAPI)(nil).PutTargets), append([]interface{}{ctx, in}, opts...)...)
}

func (m *MockEventBridgeAPI) RemoveTargets(ctx context.Context, in *eventbridge.RemoveTargetsInput, opts ...func(*eventbridge.Options)) (*eventbridge.RemoveTargetsOutput, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTargets", varargs...)
	ret0, _ := ret[0].(*eventbridge.RemoveTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockEventBridgeAPIMockRecorder) RemoveTargets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTargets", reflect.TypeOf((*MockEventBridgeAPI)(nil).RemoveTargets), append([]interface{}{ctx, in}, opts...)...)
}
